/**  Cycle Altanta, Copyright 2012 Georgia Institute of Technology
 *                                    Atlanta, GA. USA
 *
 *   @author Christopher Le Dantec <ledantec@gatech.edu>
 *   @author Anhong Guo <guoanhong15@gmail.com>
 *
 *   Updated/Modified for Atlanta's app deployment. Based on the
 *   CycleTracks codebase for SFCTA.
 *
 *   CycleTracks, Copyright 2009,2010 San Francisco County Transportation Authority
 *                                    San Francisco, CA, USA
 *
 *   @author Billy Charlton <billy.charlton@sfcta.org>
 *
 *   This file is part of CycleTracks.
 *
 *   CycleTracks is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   CycleTracks is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with CycleTracks.  If not, see <http://www.gnu.org/licenses/>.
 */
//
package edu.gatech.ppl.cycleatlanta;

import java.util.List;

import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Window;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;

public class ShowMap extends FragmentActivity {
	List<Polyline> mapTracks;
	Drawable drawable;
	Polyline gpspoints;
	PolylineOptions gpsoptions;
	float[] lineCoords;

	private GoogleMap mMap;
	private SupportMapFragment mFrag;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.mapview);
        getWindow().requestFeature(Window.FEATURE_NO_TITLE);

		try {
			Log.d("got far enough to instantiate map...", "building map");

			// check if already instantiated
			if (mMap == null) {
				mFrag = (SupportMapFragment) SupportMapFragment.newInstance().getFragmentManager().findFragmentById(R.id.map);
				mMap = mFrag.getMap();
			} else {
				mMap.clear();
			}

			// check if got map
			if (mMap != null) {
				mMap.setMyLocationEnabled(true);
			}

			if (mapTracks != null) mapTracks.clear();

	        Bundle cmds = getIntent().getExtras();
            long tripid = cmds.getLong("showtrip");

            TripData trip = TripData.fetchTrip(this, tripid);

            // Show trip details
            TextView t1 = (TextView) findViewById(R.id.TextViewT1);
            TextView t2 = (TextView) findViewById(R.id.TextViewT2);
            TextView t3 = (TextView) findViewById(R.id.TextViewT3);
            t1.setText(trip.purp);
            t2.setText(trip.info);
            t3.setText(trip.fancystart);

            // Center & zoom the map
            LatLng northEastBound = new LatLng(trip.lathigh, trip.lgtlow);
            LatLng southWestBound = new LatLng(trip.latlow, trip.lgthigh);

            // Add 500 to map span, to guarantee pins fit on map
			LatLngBounds bounds = new LatLngBounds(southWestBound, northEastBound);
			mMap.animateCamera(CameraUpdateFactory.newLatLngBounds(bounds, 500));

			if (gpspoints == null) {
				// TODO:
				AddPointsToMapLayerTask maptask = new AddPointsToMapLayerTask();
				maptask.execute(trip);
			} else {
				mapTracks.add(gpspoints);
			}

			if (trip.status < TripData.STATUS_SENT
					&& cmds != null
					&& cmds.getBoolean("uploadTrip", false)) {
			    // And upload to the cloud database, too!  W00t W00t!
                TripUploader uploader = new TripUploader(ShowMap.this);
                uploader.execute(trip.tripid);
			}

		} catch (Exception e) {
			Log.d("Map error",e.toString(), e);
		}
	}

	private class AddPointsToMapLayerTask extends AsyncTask<TripData, Integer, PolylineOptions> {
		TripData trip;

		@Override
		protected PolylineOptions doInBackground(TripData... trips) {
			trip = trips[0]; // always get just the first trip

			gpsoptions = new PolylineOptions();
			gpsoptions.addAll(trip.getPoints());

			return ShowMap.this.gpsoptions;
		}

		@Override
		protected void onPostExecute(PolylineOptions opts) {
			// Add the polylines
			mapTracks.add(ShowMap.this.gpspoints);
			ShowMap.this.gpspoints = mMap.addPolyline(opts);

			// Add start & end pins
			if (trip.startpoint != null) {
				CircleOptions circleopts = new CircleOptions();
				circleopts.center(trip.startpoint.coords);
				mMap.addCircle(circleopts);
			}
			if (trip.endpoint != null) {
				CircleOptions circleopts = new CircleOptions();
				circleopts.center(trip.endpoint.coords);
				mMap.addCircle(circleopts);
			}
	}
}

	/*
	// Make sure overlays get zapped when we go BACK
	@Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && mapView!=null) {
            mapView.getOverlays().clear();
        }
        return super.onKeyDown(keyCode, event);
    }
    */
}
